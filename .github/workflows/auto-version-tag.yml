name: Auto Version Tag and Release with Changelog

on:
  push:
    branches:
      - main

jobs:
  version-tag:
    if: startsWith(github.event.head_commit.message, 'Merge pull request')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Fetch all tags
      run: git fetch --tags

    - name: Get latest tag
      id: get_tag
      run: |
        latest=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
        if [ -z "$latest" ]; then
          latest="v0.0.0"
        fi
        echo "tag=$latest" >> $GITHUB_OUTPUT

    - name: Detect merged branch type
      id: detect
      run: |
        branch=$(git log -1 --pretty=format:%s | sed -n 's/Merge pull request .* from [^/]*\/\(.*\)/\1/p')

        if [[ "$branch" == feature/* ]]; then
          echo "bump=minor" >> $GITHUB_OUTPUT
        elif [[ "$branch" == hotfix/* || "$branch" == refactor/* || "$branch" == fix/* ]]; then
          echo "bump=patch" >> $GITHUB_OUTPUT
        elif [[ "$branch" == release/major ]]; then
          echo "bump=major" >> $GITHUB_OUTPUT
        else
          echo "Unsupported branch type: $branch"
          exit 1
        fi
        echo "branch=$branch" >> $GITHUB_OUTPUT

    - name: Calculate next version
      id: version
      run: |
        current="${{ steps.get_tag.outputs.tag }}"
        bump="${{ steps.detect.outputs.bump }}"
        IFS='.' read -r major minor patch <<< "${current#v}"

        if [[ "$bump" == "major" ]]; then
          major=$((major + 1)); minor=0; patch=0
        elif [[ "$bump" == "minor" ]]; then
          minor=$((minor + 1)); patch=0
        elif [[ "$bump" == "patch" ]]; then
          patch=$((patch + 1))
        fi

        new_version="v${major}.${minor}.${patch}"
        echo "new_version=$new_version" >> $GITHUB_OUTPUT
        echo "Next version: $new_version"

    - name: Generate changelog from commits
      id: changelog
      run: |
        previous="${{ steps.get_tag.outputs.tag }}"
        current="HEAD"
        echo "## ${{ steps.version.outputs.new_version }} - $(date +%Y-%m-%d)" > RELEASE_CHANGELOG.md

        if git rev-parse "$previous" >/dev/null 2>&1; then
          git log ${previous}..${current} --pretty=format:"* %s (%h)" >> RELEASE_CHANGELOG.md
        else
          git log --pretty=format:"* %s (%h)" >> RELEASE_CHANGELOG.md
        fi

    - name: Create Git Tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag ${{ steps.version.outputs.new_version }}
        git push origin ${{ steps.version.outputs.new_version }}

    - name: Create GitHub Release with changelog
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.new_version }}
        name: Release ${{ steps.version.outputs.new_version }}
        body_path: RELEASE_CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
